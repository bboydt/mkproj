# Creates and populates a c-project directory.

mkproj_version="v1.0"

echo "mkproj ($mkproj_version)"

if [ "$#" -lt 1 ] || [ "$1" == "--help" ]; then

    echo ""
    echo "Usage:"
    echo "    mkproj.sh project_name [parent_directory]"
    echo ""
    echo "Arguments:"
    echo "    project_name: What to name the new project."
    echo "    parent_directory: Where to place the new project."
    echo ""

    exit 1
fi

project_name=$1

if [[ -z "$2" ]]; then
    parent_directory=.
else
    parent_directory=$2
fi

# Init git repo and directory
pushd $parent_directory
git init $project_name

# Create directories
pushd $project_name
mkdir Output
mkdir Output/Release
mkdir Output/Debug
mkdir Source
mkdir Data
touch .build
touch build.sh

# Rename repo
echo "$project_name" > .git/description

# Add to git ignore
echo "# Generated by mkproj ($mkproj_version)." >> .gitignore
echo "" >> .gitignore
echo "Output/" >> .gitignore

# Generate .build
echo "# Build Config" > .build
echo "# Generated by mkproj ($mkproj_version)." >> .build
echo "" >> .build
echo "build_type=Debug" >> .build
echo "project_name=$project_name" >> .build
echo "output_dir=./Output/\$build_type" >> .build
echo "target=\$output_dir/\$project_name" >> .build
echo "sources=./Source/*.c" >> .build
echo "macro_prefix=" >> .build
echo "version_major=0" >> .build
echo "version_minor=0" >> .build
echo "version_build=0" >> .build
echo "compiler=clang" >> .build
echo "flags=" >> .build
echo "debug_flags=-D${macro_prefix}DEBUG" >> .build
echo "release_flags=-D${macro_prefix}RELEASE" >> .build

# Generate build.sh
echo "# Build Script" > build.sh
echo "# Generated by mkproj (\$mkproj_version)." >> build.sh
echo "" >> build.sh
echo "pushd \"\$(dirname \"\$0\")\"" >> build.sh
echo "" >> build.sh
echo "# Load Config" >> build.sh
echo "source .build" >> build.sh
echo "" >> build.sh
echo "# Define Flags" >> build.sh
echo "" >> build.sh
echo "if [ \$build_type == Debug ]; then" >> build.sh
echo "    flags+=\$debug_flags" >> build.sh
echo "else" >> build.sh
echo "    flags+=\$release_flags" >> build.sh
echo "fi    " >> build.sh
echo "" >> build.sh
echo "flags+=\" -D\${macro_prefix}VERSION_MAJOR=\$version_major\"" >> build.sh 
echo "flags+=\" -D\${macro_prefix}VERSION_MINOR=\$version_minor\"" >> build.sh 
echo "flags+=\" -D\${macro_prefix}VERSION_BUILD=\$version_build\"" >> build.sh 
echo "" >> build.sh
echo "# Build Target" >> build.sh
echo "\$compiler \$sources \$flags -o \$target" >> build.sh
echo "" >> build.sh
echo "# Update version_build" >> build.sh
echo "((version_build++))" >> build.sh
echo "sed -i \".backup\" \"s/version_build=[0-9]*/version_build=\$version_build/\" .build" >> build.sh
echo "rm -f .build.backup" >> build.sh
echo "" >> build.sh
echo "popd" >> build.sh

chmod 777 build.sh

# Generate main.c
pushd Source
echo "#include <stdio.h>" > main.c
echo "" >> main.c
echo "int main(int argc, const char **argv)" >> main.c
echo "{" >> main.c
echo "\tprintf(\"$project_name\\\n\");" >> main.c
echo "\treturn 0;" >> main.c
echo "}" >> main.c

popd
popd
popd